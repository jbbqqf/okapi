from django.contrib.auth import login, logout

from rest_framework import status
from rest_framework.views import APIView
from rest_framework.authtoken.models import Token
from rest_framework.generics import GenericAPIView
from rest_framework.permissions import AllowAny
from rest_framework.response import Response

from okauth.serializers import LoginSerializer, TokenSerializer

class LoginView(GenericAPIView):
    """
    === API endpoint to log in django users with django sessions ===
    """

    permission_classes = (AllowAny,)
    serializer_class = LoginSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)

        serializer.is_valid(raise_exception=True)

        user = serializer.validated_data['user']
        login(request, user)

        token, created = Token.objects.get_or_create(user=user)
        serialized_token = TokenSerializer(token)
        response_data = {
            'id': user.id,
            'username': serializer.data['username'],
            'token': serialized_token.data['key'],
        }
        return Response(response_data)

class LogoutView(APIView):
    """
    === API endpoint to log out django users and destroy django sessions ===

    No argument is required to POST on this route. What it does is that it
    removes session information in cookie CSRF token generated by a previous
    login call.

    If no user is loged response is a 400 bad request.
    """

    permission_classes = (AllowAny,)

    def post(self, request):
        try:
            request.user.auth_token.delete()
        except:
            message = {'message': 'No user is loged'}
            return Response(message, status=status.HTTP_400_BAD_REQUEST)

        logout(request)

        message = {'message': 'Successfully loged out'}
        return Response(message, status=status.HTTP_200_OK)
